// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
//              AUTH
// ===================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  notes         FiscalNote[] @relation("NoteCreator")
  attestedNotes FiscalNote[] @relation("Attestor")
  historyEvents NoteHistoryEvent[] @relation("EventAuthor")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MANAGER
  OWNER
}


// ===================================
//          APP-SPECIFIC
// ===================================

model FiscalNote {
  id                    String        @id @default(cuid())
  description           String
  requester             String
  issueDate             DateTime
  attestationDeadline   DateTime
  status                InvoiceStatus @default(PENDENTE)
  fileType              String
  fileName              String
  originalFileUrl       String
  driveFileId           String
  amount                Float?
  invoiceType           InvoiceType   @default(SERVICO)
  projectTitle          String?
  projectAccountNumber  String
  hasWithholdingTax     Boolean       @default(false)

  // Coordenador (para atesto externo)
  coordinatorEmail      String
  coordinatorName       String

  // Dados extraídos da nota (pela IA ou manualmente)
  prestadorRazaoSocial  String?
  prestadorCnpj         String?
  tomadorRazaoSocial    String?
  tomadorCnpj           String?
  numeroNota            String?
  dataEmissao           String?       

  // Dados do atesto (quando realizado)
  attestedBy            String? // Nome de quem atestou
  attestedAt            DateTime?
  observation           String?
  attestedFileUrl       String?
  attestedDriveFileId   String?

  // Relacionamentos
  user                  User              @relation("NoteCreator", fields: [userId], references: [id])
  userId                String
  attestor              User?             @relation("Attestor", fields: [attestedById], references: [id])
  attestedById          String?
  history               NoteHistoryEvent[]

  // Timestamps
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model NoteHistoryEvent {
  id            String      @id @default(cuid())
  date          DateTime    @default(now())
  type          HistoryType
  details       String
  
  // Relação com a nota
  note          FiscalNote  @relation(fields: [fiscalNoteId], references: [id], onDelete: Cascade)
  fiscalNoteId  String

  // Relação com o autor do evento (usuário logado)
  author        User        @relation("EventAuthor", fields: [userId], references: [id])
  userId        String
}

enum InvoiceStatus {
  PENDENTE
  ATESTADA
  EXPIRADA
  REJEITADA
}

enum InvoiceType {
  PRODUTO
  SERVICO
}

enum HistoryType {
  CREATED
  ATTESTED
  REVERTED
  EDITED
  EXPIRED
  REJECTED
}


model Settings {
  id                       String @id @default("default")
  attestationDeadlineInDays Int    @default(30)
  reminderFrequencyInDays  Int    @default(3)
}

model EmailTemplate {
  id        String   @id @default(cuid())
  type      String   @unique
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
