// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// Enums (SINTAXE CORRIGIDA)
// ===================================

enum Role {
  USER
  MANAGER
  OWNER
}

enum InvoiceStatus {
  PENDENTE
  ATESTADA
  EXPIRADA
  REJEITADA
}

enum InvoiceType {
  SERVICO
  PRODUTO
}

enum HistoryType {
  CREATED
  ATTESTED
  REVERTED
  EDITED
  EXPIRED
  REJECTED
  DELETED
  RESTORED
}

enum PermissionType {
  CAN_MANAGE_USERS
  CAN_MANAGE_SETTINGS
  CAN_DELETE_PENDING_NOTE
  CAN_MANAGE_TRASH
}

enum StatusOF {
  RASCUNHO
  AGUARDANDO_CONFIRMACAO
  AGUARDANDO_NOTA
  NF_RECEBIDA
  ATRASADO
  CONCLUIDO
  CANCELADO
}


// ===================================
// Auth & User
// ===================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts             Account[]
  sessions             Session[]
  createdNotes         FiscalNote[]          @relation("NoteCreator")
  attestedNotes        FiscalNote[]          @relation("Attestor")
  historyEvents        NoteHistoryEvent[]    @relation("EventAuthor")
  permissions          UserPermission[]
  ordensDeFornecimento OrdemDeFornecimento[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model UserPermission {
  userId     String
  permission PermissionType
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, permission])
}


// ===================================
// App Core
// ===================================

model FiscalNote {
  id                   String        @id @default(cuid())
  description          String
  requester            String
  issueDate            DateTime      @default(now())
  attestationDeadline  DateTime?
  status               InvoiceStatus @default(PENDENTE)
  invoiceType          InvoiceType   @default(SERVICO)
  fileType             String
  fileName             String
  originalFileUrl      String
  driveFileId          String
  amount               Float?
  hasWithholdingTax    Boolean       @default(false)
  projectTitle         String?
  projectAccountNumber String
  coordinatorName      String
  coordinatorEmail     String
  attestedBy           String?
  attestedAt           DateTime?
  attestedFileUrl      String?
  attestedDriveFileId  String?
  attestedById         String?
  attestor             User?         @relation("Attestor", fields: [attestedById], references: [id])
  reportFileName       String?
  reportDriveFileId    String?
  reportFileUrl        String?
  observation          String?
  prestadorRazaoSocial String?
  prestadorCnpj        String?
  tomadorRazaoSocial   String?
  tomadorCnpj          String?
  numeroNota           String?
  dataEmissao          String?
  userId               String
  user                 User          @relation("NoteCreator", fields: [userId], references: [id])
  history              NoteHistoryEvent[]
  deleted              Boolean       @default(false)
  deletedAt            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@index([userId])
  @@index([attestedById])
  @@index([status])
  @@index([deleted])
}

model NoteHistoryEvent {
  id           String      @id @default(cuid())
  date         DateTime    @default(now())
  type         HistoryType
  details      String
  userName     String?
  fiscalNoteId String
  note         FiscalNote  @relation(fields: [fiscalNoteId], references: [id], onDelete: Cascade)
  userId       String
  author       User        @relation("EventAuthor", fields: [userId], references: [id])

  @@index([fiscalNoteId])
  @@index([userId])
}

model Settings {
  id                        String  @id @default("default")
  attestationDeadlineInDays Int     @default(30)
  reminderFrequencyInDays   Int     @default(3)
  aiModel                   String? @default("gemini-1.5-flash-latest")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  type      String   @unique
  subject   String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==============================================================
// Módulo de Solicitação (Ordem de Fornecimento)
// ==============================================================

model Fornecedor {
  id                   String                @id @default(cuid())
  razaoSocial          String
  nomeFantasia         String?
  cnpj                 String                @unique
  inscricaoEstual      String?
  inscricaoMunicipal   String?
  endereco             String
  bairro               String
  cidade               String
  estado               String
  cep                  String
  telefone             String?
  email                String?
  pessoaContato        String?
  dadosBancarios       Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  ordensDeFornecimento OrdemDeFornecimento[]

  @@index([razaoSocial])
  @@index([cidade])
}

model OrdemDeFornecimento {
  id                        String     @id @default(cuid())
  numeroOF                  String     @unique @default(cuid())
  dataEmissao               DateTime   @default(now())
  nomeProjeto               String
  coordenadorProjeto        String
  numeroContrato            String
  contaCorrente             String
  numeroProcesso            String
  vigenciaProjeto           String
  itens                     Json
  valorTotal                Float
  enderecoEntrega           String
  prazoEntrega              String
  frete                     String?
  instrucoesFaturamento     String     @db.Text
  status                    StatusOF   @default(RASCUNHO)
  dataConfirmacaoFornecedor DateTime?
  dataEnvioNF               DateTime?
  notaFiscalId              String?
  dataConclusao             DateTime?
  dataCancelamento          DateTime?
  motivoCancelamento        String?
  userId                    String
  user                      User       @relation(fields: [userId], references: [id])
  fornecedorId              String
  fornecedor                Fornecedor @relation(fields: [fornecedorId], references: [id])
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt

  @@index([userId])
  @@index([fornecedorId])
  @@index([status])
  @@index([dataEmissao])
}