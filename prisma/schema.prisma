// ===================================
// Prisma Schema (prioriza o que o CÓDIGO usa para atesto)
// ===================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// Enums
// ===================================

enum Role {
  USER
  MANAGER
  OWNER
}

enum InvoiceStatus {
  PENDENTE
  ATESTADA
  EXPIRADA
  REJEITADA
}

enum InvoiceType {
  SERVICO
  PRODUTO
}

enum HistoryType {
  CREATED
  ATTESTED
  REVERTED
  EDITED
  EXPIRED
  REJECTED
}

enum StatusOF {
  RASCUNHO
  AGUARDANDO_CONFIRMACAO
  AGUARDANDO_NOTA
  NF_RECEBIDA
  ATRASADO
  CONCLUIDO
  CANCELADO
}

// ===================================
// Auth
// ===================================

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  role                  Role                   @default(USER)

  accounts              Account[]
  sessions              Session[]

  // Relações com notas fiscais
  notes                 FiscalNote[]           @relation("NoteCreator")
  attestedNotes         FiscalNote[]           @relation("Attestor")       // <- o código usa "Attestor"
  historyEvents         NoteHistoryEvent[]     @relation("EventAuthor")
  ordensDeFornecimento  OrdemDeFornecimento[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  // padrão seguro do NextAuth: composição
  @@unique([identifier, token])
  @@index([token])
  @@index([expires])
}

// ===================================
// App
// ===================================

model FiscalNote {
  id                    String         @id @default(cuid())
  description           String
  requester             String
  issueDate             DateTime       @default(now())
  attestationDeadline   DateTime?      // dexa opcional p/ evitar falha de criação
  status                InvoiceStatus  @default(PENDENTE)

  invoiceType           InvoiceType    @default(SERVICO)

  fileType              String
  fileName              String
  originalFileUrl       String
  driveFileId           String

  amount                Float?
  hasWithholdingTax     Boolean        @default(false)

  // Dados do projeto
  projectTitle          String?
  projectAccountNumber  String

  // Coordenador (para atesto externo)
  coordinatorName       String
  coordinatorEmail      String

  // ===== Dados do ATESTO (compatível com teu código) =====
  attestedBy            String?        // texto: nome de quem atestou (teu código usa)
  attestedAt            DateTime?      // data do atesto (teu código usa)
  attestedById          String?        // FK p/ User (teu código usa)
  attestor              User?          @relation("Attestor", fields: [attestedById], references: [id])
  // =======================================================

  observation           String?
  attestedFileUrl       String?
  attestedDriveFileId   String?

  // Relatório (opcional — já existe no banco)
  reportFileName        String?
  reportDriveFileId     String?
  reportFileUrl         String?

  // Dados extraídos da nota
  prestadorRazaoSocial  String?
  prestadorCnpj         String?
  tomadorRazaoSocial    String?
  tomadorCnpj           String?
  numeroNota            String?
  dataEmissao           String?

  // Relacionamentos
  userId                String
  user                  User           @relation("NoteCreator", fields: [userId], references: [id])
  history               NoteHistoryEvent[]

  // Timestamps
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([userId])
  @@index([attestedById])
  @@index([status])
  @@index([issueDate])
}

model NoteHistoryEvent {
  id            String      @id @default(cuid())
  date          DateTime    @default(now())
  type          HistoryType
  details       String

  // Relação com a nota
  note          FiscalNote  @relation(fields: [fiscalNoteId], references: [id], onDelete: Cascade)
  fiscalNoteId  String

  // Autor do evento (teu código usa author.connect({ id }))
  author        User        @relation("EventAuthor", fields: [userId], references: [id])
  userId        String

  @@index([fiscalNoteId])
  @@index([userId])
}

model Settings {
  id                          String  @id @default("default")
  attestationDeadlineInDays   Int     @default(30)
  reminderFrequencyInDays     Int     @default(3)
}

model EmailTemplate {
  id        String   @id @default(cuid())
  type      String   @unique
  subject   String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===================================
// Módulo de Solicitação (Ordem de Fornecimento)
// ===================================

model Fornecedor {
  id                     String                 @id @default(cuid())
  razaoSocial            String
  nomeFantasia           String?
  cnpj                   String                 @unique
  inscricaoEstadual      String?
  inscricaoMunicipal     String?
  endereco               String
  bairro                 String
  cidade                 String
  estado                 String
  cep                    String
  telefone               String?
  email                  String?
  pessoaContato          String?
  dadosBancarios         Json?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt

  ordensDeFornecimento   OrdemDeFornecimento[]

  @@index([razaoSocial])
  @@index([cidade])
}

model OrdemDeFornecimento {
  id                        String    @id @default(cuid())
  numeroOF                  String    @unique @default(cuid())
  dataEmissao               DateTime  @default(now())
  nomeProjeto               String
  coordenadorProjeto        String
  numeroContrato            String
  contaCorrente             String
  numeroProcesso            String
  vigenciaProjeto           String
  itens                     Json
  valorTotal                Float
  enderecoEntrega           String
  prazoEntrega              String
  frete                     String?
  instrucoesFaturamento     String    @db.Text
  status                    StatusOF  @default(RASCUNHO)
  dataConfirmacaoFornecedor DateTime?
  dataEnvioNF               DateTime?
  notaFiscalId              String?
  dataConclusao             DateTime?
  dataCancelamento          DateTime?
  motivoCancelamento        String?

  // Relações
  userId       String
  user         User        @relation(fields: [userId], references: [id])

  fornecedorId String
  fornecedor   Fornecedor  @relation(fields: [fornecedorId], references: [id])

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([fornecedorId])
  @@index([status])
  @@index([dataEmissao])
}
